{
    "kind": "discovery#restDescription",
    "etag": "",
    "discoveryVersion": "v1",
    "id": "clouddebugger:v2",
    "name": "clouddebugger",
    "version": "v2",
    "title": "Stackdriver Debugger API",
    "description": "Examines the call stack and variables of a running application without stopping or slowing it down.\n",
    "documentationLink": "http://cloud.google.com/debugger",
    "protocol": "rest",
    "rootUrl": "https://clouddebugger.googleapis.com/",
    "auth": {
        "oauth2": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud_debugger"
        ]
    },
    "parameters": [
        {
            "name": "oauth_token",
            "desc": "OAuth 2.0 token for the current user.",
            "type": "string"
        },
        {
            "name": "fields",
            "desc": "Selector specifying which fields to include in a partial response.",
            "type": "string"
        },
        {
            "name": "uploadType",
            "desc": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "type": "string"
        },
        {
            "name": "callback",
            "desc": "JSONP",
            "type": "string"
        },
        {
            "name": "alt",
            "desc": "Data format for response.",
            "type": "string",
            "default": "json",
            "enum": [
                {
                    "name": "json",
                    "desc": "Responses with Content-Type of application/json"
                },
                {
                    "name": "media",
                    "desc": "Media download with context-dependent Content-Type"
                },
                {
                    "name": "proto",
                    "desc": "Responses with Content-Type of application/x-protobuf"
                }
            ]
        },
        {
            "name": "access_token",
            "desc": "OAuth access token.",
            "type": "string"
        },
        {
            "name": "quotaUser",
            "desc": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "type": "string"
        },
        {
            "name": "upload_protocol",
            "desc": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "type": "string"
        },
        {
            "name": "prettyPrint",
            "desc": "Returns response with indentations and line breaks.",
            "type": "bool",
            "default": "true"
        },
        {
            "name": "$.xgafv",
            "desc": "V1 error format.",
            "type": "string",
            "enum": [
                {
                    "name": "1",
                    "desc": "v1 error format"
                },
                {
                    "name": "2",
                    "desc": "v2 error format"
                }
            ]
        },
        {
            "name": "key",
            "desc": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "type": "string"
        },
        {
            "name": "pp",
            "desc": "Pretty-print response.",
            "type": "bool",
            "default": "true"
        },
        {
            "name": "bearer_token",
            "desc": "OAuth bearer token.",
            "type": "string"
        }
    ],
    "schemas": [
        {
            "name": "UpdateActiveBreakpointResponse",
            "desc": "Response for updating an active breakpoint.\nThe message is defined to allow future extensions.",
            "type": "object"
        },
        {
            "name": "SetBreakpointResponse",
            "desc": "Response for setting a breakpoint.",
            "type": "object",
            "fields": [
                {
                    "name": "breakpoint",
                    "desc": "Breakpoint resource.\nThe field `id` is guaranteed to be set (in addition to the echoed fileds).",
                    "type": "ref",
                    "refType": "Breakpoint"
                }
            ]
        },
        {
            "name": "SourceContext",
            "desc": "A SourceContext is a reference to a tree of files. A SourceContext together\nwith a path point to a unique revision of a single file or directory.",
            "type": "object",
            "fields": [
                {
                    "name": "gerrit",
                    "desc": "A SourceContext referring to a Gerrit project.",
                    "type": "ref",
                    "refType": "GerritSourceContext"
                },
                {
                    "name": "cloudRepo",
                    "desc": "A SourceContext referring to a revision in a cloud repo.",
                    "type": "ref",
                    "refType": "CloudRepoSourceContext"
                },
                {
                    "name": "cloudWorkspace",
                    "desc": "A SourceContext referring to a snapshot in a cloud workspace.",
                    "type": "ref",
                    "refType": "CloudWorkspaceSourceContext"
                },
                {
                    "name": "git",
                    "desc": "A SourceContext referring to any third party Git repo (e.g. GitHub).",
                    "type": "ref",
                    "refType": "GitSourceContext"
                }
            ]
        },
        {
            "name": "RegisterDebuggeeResponse",
            "desc": "Response for registering a debuggee.",
            "type": "object",
            "fields": [
                {
                    "name": "debuggee",
                    "desc": "Debuggee resource.\nThe field `id` is guranteed to be set (in addition to the echoed fields).",
                    "type": "ref",
                    "refType": "Debuggee"
                }
            ]
        },
        {
            "name": "RepoId",
            "desc": "A unique identifier for a cloud repo.",
            "type": "object",
            "fields": [
                {
                    "name": "uid",
                    "desc": "A server-assigned, globally unique identifier.",
                    "type": "string"
                },
                {
                    "name": "projectRepoId",
                    "desc": "A combination of a project ID and a repo name.",
                    "type": "ref",
                    "refType": "ProjectRepoId"
                }
            ]
        },
        {
            "name": "CloudWorkspaceSourceContext",
            "desc": "A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.",
            "type": "object",
            "fields": [
                {
                    "name": "snapshotId",
                    "desc": "The ID of the snapshot.\nAn empty snapshot_id refers to the most recent snapshot.",
                    "type": "string"
                },
                {
                    "name": "workspaceId",
                    "desc": "The ID of the workspace.",
                    "type": "ref",
                    "refType": "CloudWorkspaceId"
                }
            ]
        },
        {
            "name": "RegisterDebuggeeRequest",
            "desc": "Request to register a debuggee.",
            "type": "object",
            "fields": [
                {
                    "name": "debuggee",
                    "desc": "Debuggee information to register.\nThe fields `project`, `uniquifier`, `description` and `agent_version`\nof the debuggee must be set.",
                    "type": "ref",
                    "refType": "Debuggee"
                }
            ]
        },
        {
            "name": "FormatMessage",
            "desc": "Represents a message with parameters.",
            "type": "object",
            "fields": [
                {
                    "name": "parameters",
                    "desc": "Optional parameters to be embedded into the message.",
                    "collection": "array",
                    "type": "string"
                },
                {
                    "name": "format",
                    "desc": "Format template for the message. The `format` uses placeholders `$0`,\n`$1`, etc. to reference parameters. `$$` can be used to denote the `$`\ncharacter.\n\nExamples:\n\n*   `Failed to load '$0' which helps debug $1 the first time it\n    is loaded.  Again, $0 is very important.`\n*   `Please pay $$10 to use $0 instead of $1.`",
                    "type": "string"
                }
            ]
        },
        {
            "name": "ProjectRepoId",
            "desc": "Selects a repo using a Google Cloud Platform project ID\n(e.g. winged-cargo-31) and a repo name within that project.",
            "type": "object",
            "fields": [
                {
                    "name": "repoName",
                    "desc": "The name of the repo. Leave empty for the default repo.",
                    "type": "string"
                },
                {
                    "name": "projectId",
                    "desc": "The ID of the project.",
                    "type": "string"
                }
            ]
        },
        {
            "name": "AliasContext",
            "desc": "An alias to a repo revision.",
            "type": "object",
            "fields": [
                {
                    "name": "name",
                    "desc": "The alias name.",
                    "type": "string"
                },
                {
                    "name": "kind",
                    "desc": "The alias kind.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "ANY",
                            "desc": "Do not use."
                        },
                        {
                            "name": "FIXED",
                            "desc": "Git tag"
                        },
                        {
                            "name": "MOVABLE",
                            "desc": "Git branch"
                        },
                        {
                            "name": "OTHER",
                            "desc": "OTHER is used to specify non-standard aliases, those not of the kinds\nabove. For example, if a Git repo has a ref named \"refs/foo/bar\", it\nis considered to be of kind OTHER."
                        }
                    ]
                }
            ]
        },
        {
            "name": "StackFrame",
            "desc": "Represents a stack frame context.",
            "type": "object",
            "fields": [
                {
                    "name": "function",
                    "desc": "Demangled function name at the call site.",
                    "type": "string"
                },
                {
                    "name": "arguments",
                    "desc": "Set of arguments passed to this function.\nNote that this might not be populated for all stack frames.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Variable"
                },
                {
                    "name": "locals",
                    "desc": "Set of local variables at the stack frame location.\nNote that this might not be populated for all stack frames.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Variable"
                },
                {
                    "name": "location",
                    "desc": "Source location of the call site.",
                    "type": "ref",
                    "refType": "SourceLocation"
                }
            ]
        },
        {
            "name": "ListBreakpointsResponse",
            "desc": "Response for listing breakpoints.",
            "type": "object",
            "fields": [
                {
                    "name": "breakpoints",
                    "desc": "List of breakpoints matching the request.\nThe fields `id` and `location` are guaranteed to be set on each breakpoint.\nThe fields: `stack_frames`, `evaluated_expressions` and `variable_table`\nare cleared on each breakpoint regardless of it's status.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Breakpoint"
                },
                {
                    "name": "nextWaitToken",
                    "desc": "A wait token that can be used in the next call to `list` (REST) or\n`ListBreakpoints` (RPC) to block until the list of breakpoints has changes.",
                    "type": "string"
                }
            ]
        },
        {
            "name": "UpdateActiveBreakpointRequest",
            "desc": "Request to update an active breakpoint.",
            "type": "object",
            "fields": [
                {
                    "name": "breakpoint",
                    "desc": "Updated breakpoint information.\nThe field 'id' must be set.",
                    "type": "ref",
                    "refType": "Breakpoint"
                }
            ]
        },
        {
            "name": "Breakpoint",
            "desc": "Represents the breakpoint specification, status and results.",
            "type": "object",
            "fields": [
                {
                    "name": "logMessageFormat",
                    "desc": "Only relevant when action is `LOG`. Defines the message to log when\nthe breakpoint hits. The message may include parameter placeholders `$0`,\n`$1`, etc. These placeholders are replaced with the evaluated value\nof the appropriate expression. Expressions not referenced in\n`log_message_format` are not logged.\n\nExample: `Message received, id = $0, count = $1` with\n`expressions` = `[ message.id, message.count ]`.",
                    "type": "string"
                },
                {
                    "name": "createTime",
                    "desc": "Time this breakpoint was created by the server in seconds resolution.",
                    "type": "datetime"
                },
                {
                    "name": "stackFrames",
                    "desc": "The stack at breakpoint time.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "StackFrame"
                },
                {
                    "name": "userEmail",
                    "desc": "E-mail address of the user that created this breakpoint",
                    "type": "string"
                },
                {
                    "name": "finalTime",
                    "desc": "Time this breakpoint was finalized as seen by the server in seconds\nresolution.",
                    "type": "datetime"
                },
                {
                    "name": "labels",
                    "desc": "A set of custom breakpoint properties, populated by the agent, to be\ndisplayed to the user.",
                    "collection": "map",
                    "type": "string"
                },
                {
                    "name": "evaluatedExpressions",
                    "desc": "Values of evaluated expressions at breakpoint time.\nThe evaluated expressions appear in exactly the same order they\nare listed in the `expressions` field.\nThe `name` field holds the original expression text, the `value` or\n`members` field holds the result of the evaluated expression.\nIf the expression cannot be evaluated, the `status` inside the `Variable`\nwill indicate an error and contain the error text.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Variable"
                },
                {
                    "name": "action",
                    "desc": "Action that the agent should perform when the code at the\nbreakpoint location is hit.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "CAPTURE",
                            "desc": "Capture stack frame and variables and update the breakpoint.\nThe data is only captured once. After that the breakpoint is set\nin a final state."
                        },
                        {
                            "name": "LOG",
                            "desc": "Log each breakpoint hit. The breakpoint remains active until\ndeleted or expired."
                        }
                    ]
                },
                {
                    "name": "variableTable",
                    "desc": "The `variable_table` exists to aid with computation, memory and network\ntraffic optimization.  It enables storing a variable once and reference\nit from multiple variables, including variables stored in the\n`variable_table` itself.\nFor example, the same `this` object, which may appear at many levels of\nthe stack, can have all of its data stored once in this table.  The\nstack frame variables then would hold only a reference to it.\n\nThe variable `var_table_index` field is an index into this repeated field.\nThe stored objects are nameless and get their name from the referencing\nvariable. The effective variable is a merge of the referencing variable\nand the referenced variable.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Variable"
                },
                {
                    "name": "expressions",
                    "desc": "List of read-only expressions to evaluate at the breakpoint location.\nThe expressions are composed using expressions in the programming language\nat the source location. If the breakpoint action is `LOG`, the evaluated\nexpressions are included in log statements.",
                    "collection": "array",
                    "type": "string"
                },
                {
                    "name": "isFinalState",
                    "desc": "When true, indicates that this is a final result and the\nbreakpoint state will not change from here on.",
                    "type": "bool"
                },
                {
                    "name": "condition",
                    "desc": "Condition that triggers the breakpoint.\nThe condition is a compound boolean expression composed using expressions\nin a programming language at the source location.",
                    "type": "string"
                },
                {
                    "name": "status",
                    "desc": "Breakpoint status.\n\nThe status includes an error flag and a human readable message.\nThis field is usually unset. The message can be either\ninformational or an error message. Regardless, clients should always\ndisplay the text message back to the user.\n\nError status indicates complete failure of the breakpoint.\n\nExample (non-final state): `Still loading symbols...`\n\nExamples (final state):\n\n*   `Invalid line number` referring to location\n*   `Field f not found in class C` referring to condition",
                    "type": "ref",
                    "refType": "StatusMessage"
                },
                {
                    "name": "id",
                    "desc": "Breakpoint identifier, unique in the scope of the debuggee.",
                    "type": "string"
                },
                {
                    "name": "location",
                    "desc": "Breakpoint source location.",
                    "type": "ref",
                    "refType": "SourceLocation"
                },
                {
                    "name": "logLevel",
                    "desc": "Indicates the severity of the log. Only relevant when action is `LOG`.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "INFO",
                            "desc": "Information log message."
                        },
                        {
                            "name": "WARNING",
                            "desc": "Warning log message."
                        },
                        {
                            "name": "ERROR",
                            "desc": "Error log message."
                        }
                    ]
                }
            ]
        },
        {
            "name": "CloudRepoSourceContext",
            "desc": "A CloudRepoSourceContext denotes a particular revision in a cloud\nrepo (a repo hosted by the Google Cloud Platform).",
            "type": "object",
            "fields": [
                {
                    "name": "aliasContext",
                    "desc": "An alias, which may be a branch or tag.",
                    "type": "ref",
                    "refType": "AliasContext"
                },
                {
                    "name": "revisionId",
                    "desc": "A revision ID.",
                    "type": "string"
                },
                {
                    "name": "aliasName",
                    "desc": "The name of an alias (branch, tag, etc.).",
                    "type": "string"
                },
                {
                    "name": "repoId",
                    "desc": "The ID of the repo.",
                    "type": "ref",
                    "refType": "RepoId"
                }
            ]
        },
        {
            "name": "Variable",
            "desc": "Represents a variable or an argument possibly of a compound object type.\nNote how the following variables are represented:\n\n1) A simple variable:\n\n    int x = 5\n\n    { name: \"x\", value: \"5\", type: \"int\" }  // Captured variable\n\n2) A compound object:\n\n    struct T {\n        int m1;\n        int m2;\n    };\n    T x = { 3, 7 };\n\n    {  // Captured variable\n        name: \"x\",\n        type: \"T\",\n        members { name: \"m1\", value: \"3\", type: \"int\" },\n        members { name: \"m2\", value: \"7\", type: \"int\" }\n    }\n\n3) A pointer where the pointee was captured:\n\n    T x = { 3, 7 };\n    T* p = \u0026x;\n\n    {   // Captured variable\n        name: \"p\",\n        type: \"T*\",\n        value: \"0x00500500\",\n        members { name: \"m1\", value: \"3\", type: \"int\" },\n        members { name: \"m2\", value: \"7\", type: \"int\" }\n    }\n\n4) A pointer where the pointee was not captured:\n\n    T* p = new T;\n\n    {   // Captured variable\n        name: \"p\",\n        type: \"T*\",\n        value: \"0x00400400\"\n        status { is_error: true, description { format: \"unavailable\" } }\n    }\n\nThe status should describe the reason for the missing value,\nsuch as `\u003coptimized out\u003e`, `\u003cinaccessible\u003e`, `\u003cpointers limit reached\u003e`.\n\nNote that a null pointer should not have members.\n\n5) An unnamed value:\n\n    int* p = new int(7);\n\n    {   // Captured variable\n        name: \"p\",\n        value: \"0x00500500\",\n        type: \"int*\",\n        members { value: \"7\", type: \"int\" } }\n\n6) An unnamed pointer where the pointee was not captured:\n\n    int* p = new int(7);\n    int** pp = \u0026p;\n\n    {  // Captured variable\n        name: \"pp\",\n        value: \"0x00500500\",\n        type: \"int**\",\n        members {\n            value: \"0x00400400\",\n            type: \"int*\"\n            status {\n                is_error: true,\n                description: { format: \"unavailable\" } }\n            }\n        }\n    }\n\nTo optimize computation, memory and network traffic, variables that\nrepeat in the output multiple times can be stored once in a shared\nvariable table and be referenced using the `var_table_index` field.  The\nvariables stored in the shared table are nameless and are essentially\na partition of the complete variable. To reconstruct the complete\nvariable, merge the referencing variable with the referenced variable.\n\nWhen using the shared variable table, the following variables:\n\n    T x = { 3, 7 };\n    T* p = \u0026x;\n    T\u0026 r = x;\n\n    { name: \"x\", var_table_index: 3, type: \"T\" }  // Captured variables\n    { name: \"p\", value \"0x00500500\", type=\"T*\", var_table_index: 3 }\n    { name: \"r\", type=\"T\u0026\", var_table_index: 3 }\n\n    {  // Shared variable table entry #3:\n        members { name: \"m1\", value: \"3\", type: \"int\" },\n        members { name: \"m2\", value: \"7\", type: \"int\" }\n    }\n\nNote that the pointer address is stored with the referencing variable\nand not with the referenced variable. This allows the referenced variable\nto be shared between pointers and references.\n\nThe type field is optional. The debugger agent may or may not support it.",
            "type": "object",
            "fields": [
                {
                    "name": "members",
                    "desc": "Members contained or pointed to by the variable.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Variable"
                },
                {
                    "name": "status",
                    "desc": "Status associated with the variable. This field will usually stay\nunset. A status of a single variable only applies to that variable or\nexpression. The rest of breakpoint data still remains valid. Variables\nmight be reported in error state even when breakpoint is not in final\nstate.\n\nThe message may refer to variable name with `refers_to` set to\n`VARIABLE_NAME`. Alternatively `refers_to` will be set to `VARIABLE_VALUE`.\nIn either case variable value and members will be unset.\n\nExample of error message applied to name: `Invalid expression syntax`.\n\nExample of information message applied to value: `Not captured`.\n\nExamples of error message applied to value:\n\n*   `Malformed string`,\n*   `Field f not found in class C`\n*   `Null pointer dereference`",
                    "type": "ref",
                    "refType": "StatusMessage"
                },
                {
                    "name": "name",
                    "desc": "Name of the variable, if any.",
                    "type": "string"
                },
                {
                    "name": "type",
                    "desc": "Variable type (e.g. `MyClass`). If the variable is split with\n`var_table_index`, `type` goes next to `value`. The interpretation of\na type is agent specific. It is recommended to include the dynamic type\nrather than a static type of an object.",
                    "type": "string"
                },
                {
                    "name": "varTableIndex",
                    "desc": "Reference to a variable in the shared variable table. More than\none variable can reference the same variable in the table. The\n`var_table_index` field is an index into `variable_table` in Breakpoint.",
                    "type": "int32"
                },
                {
                    "name": "value",
                    "desc": "Simple value of the variable.",
                    "type": "string"
                }
            ]
        },
        {
            "name": "GetBreakpointResponse",
            "desc": "Response for getting breakpoint information.",
            "type": "object",
            "fields": [
                {
                    "name": "breakpoint",
                    "desc": "Complete breakpoint state.\nThe fields `id` and `location` are guaranteed to be set.",
                    "type": "ref",
                    "refType": "Breakpoint"
                }
            ]
        },
        {
            "name": "StatusMessage",
            "desc": "Represents a contextual status message.\nThe message can indicate an error or informational status, and refer to\nspecific parts of the containing object.\nFor example, the `Breakpoint.status` field can indicate an error referring\nto the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.",
            "type": "object",
            "fields": [
                {
                    "name": "description",
                    "desc": "Status message text.",
                    "type": "ref",
                    "refType": "FormatMessage"
                },
                {
                    "name": "refersTo",
                    "desc": "Reference to which the message applies.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNSPECIFIED",
                            "desc": "Status doesn't refer to any particular input."
                        },
                        {
                            "name": "BREAKPOINT_SOURCE_LOCATION",
                            "desc": "Status applies to the breakpoint and is related to its location."
                        },
                        {
                            "name": "BREAKPOINT_CONDITION",
                            "desc": "Status applies to the breakpoint and is related to its condition."
                        },
                        {
                            "name": "BREAKPOINT_EXPRESSION",
                            "desc": "Status applies to the breakpoint and is related to its expressions."
                        },
                        {
                            "name": "BREAKPOINT_AGE",
                            "desc": "Status applies to the breakpoint and is related to its age."
                        },
                        {
                            "name": "VARIABLE_NAME",
                            "desc": "Status applies to the entire variable."
                        },
                        {
                            "name": "VARIABLE_VALUE",
                            "desc": "Status applies to variable value (variable name is valid)."
                        }
                    ]
                },
                {
                    "name": "isError",
                    "desc": "Distinguishes errors from informational messages.",
                    "type": "bool"
                }
            ]
        },
        {
            "name": "Debuggee",
            "desc": "Represents the application to debug. The application may include one or more\nreplicated processes executing the same code. Each of these processes is\nattached with a debugger agent, carrying out the debugging commands.\nThe agents attached to the same debuggee are identified by using exactly the\nsame field values when registering.",
            "type": "object",
            "fields": [
                {
                    "name": "isDisabled",
                    "desc": "If set to `true`, indicates that the agent should disable itself and\ndetach from the debuggee.",
                    "type": "bool"
                },
                {
                    "name": "uniquifier",
                    "desc": "Debuggee uniquifier within the project.\nAny string that identifies the application within the project can be used.\nIncluding environment and version or build IDs is recommended.",
                    "type": "string"
                },
                {
                    "name": "labels",
                    "desc": "A set of custom debuggee properties, populated by the agent, to be\ndisplayed to the user.",
                    "collection": "map",
                    "type": "string"
                },
                {
                    "name": "status",
                    "desc": "Human readable message to be displayed to the user about this debuggee.\nAbsence of this field indicates no status. The message can be either\ninformational or an error status.",
                    "type": "ref",
                    "refType": "StatusMessage"
                },
                {
                    "name": "id",
                    "desc": "Unique identifier for the debuggee generated by the controller service.",
                    "type": "string"
                },
                {
                    "name": "agentVersion",
                    "desc": "Version ID of the agent release. The version ID is structured as\nfollowing: `domain/type/vmajor.minor` (for example\n`google.com/gcp-java/v1.1`).",
                    "type": "string"
                },
                {
                    "name": "description",
                    "desc": "Human readable description of the debuggee.\nIncluding a human-readable project name, environment name and version\ninformation is recommended.",
                    "type": "string"
                },
                {
                    "name": "sourceContexts",
                    "desc": "References to the locations and revisions of the source code used in the\ndeployed application.\n\nNOTE: This field is deprecated. Consumers should use\n`ext_source_contexts` if it is not empty. Debug agents should populate\nboth this field and `ext_source_contexts`.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "SourceContext"
                },
                {
                    "name": "extSourceContexts",
                    "desc": "References to the locations and revisions of the source code used in the\ndeployed application.\n\nContexts describing a remote repo related to the source code\nhave a `category` label of `remote_repo`. Source snapshot source\ncontexts have a `category` of `snapshot`.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "ExtendedSourceContext"
                },
                {
                    "name": "isInactive",
                    "desc": "If set to `true`, indicates that the debuggee is considered as inactive by\nthe Controller service.",
                    "type": "bool"
                },
                {
                    "name": "project",
                    "desc": "Project the debuggee is associated with.\nUse the project number when registering a Google Cloud Platform project.",
                    "type": "string"
                }
            ]
        },
        {
            "name": "ListDebuggeesResponse",
            "desc": "Response for listing debuggees.",
            "type": "object",
            "fields": [
                {
                    "name": "debuggees",
                    "desc": "List of debuggees accessible to the calling user.\nNote that the `description` field is the only human readable field\nthat should be displayed to the user.\nThe fields `debuggee.id` and  `description` fields are guaranteed to be\nset on each debuggee.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Debuggee"
                }
            ]
        },
        {
            "name": "Empty",
            "desc": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
            "type": "object"
        },
        {
            "name": "SourceLocation",
            "desc": "Represents a location in the source code.",
            "type": "object",
            "fields": [
                {
                    "name": "path",
                    "desc": "Path to the source file within the source context of the target binary.",
                    "type": "string"
                },
                {
                    "name": "line",
                    "desc": "Line inside the file. The first line in the file has the value `1`.",
                    "type": "int32"
                }
            ]
        },
        {
            "name": "CloudWorkspaceId",
            "desc": "A CloudWorkspaceId is a unique identifier for a cloud workspace.\nA cloud workspace is a place associated with a repo where modified files\ncan be stored before they are committed.",
            "type": "object",
            "fields": [
                {
                    "name": "repoId",
                    "desc": "The ID of the repo containing the workspace.",
                    "type": "ref",
                    "refType": "RepoId"
                },
                {
                    "name": "name",
                    "desc": "The unique name of the workspace within the repo.  This is the name\nchosen by the client in the Source API's CreateWorkspace method.",
                    "type": "string"
                }
            ]
        },
        {
            "name": "GitSourceContext",
            "desc": "A GitSourceContext denotes a particular revision in a third party Git\nrepository (e.g. GitHub).",
            "type": "object",
            "fields": [
                {
                    "name": "revisionId",
                    "desc": "Git commit hash.\nrequired.",
                    "type": "string"
                },
                {
                    "name": "url",
                    "desc": "Git repository URL.",
                    "type": "string"
                }
            ]
        },
        {
            "name": "ExtendedSourceContext",
            "desc": "An ExtendedSourceContext is a SourceContext combined with additional\ndetails describing the context.",
            "type": "object",
            "fields": [
                {
                    "name": "labels",
                    "desc": "Labels with user defined metadata.",
                    "collection": "map",
                    "type": "string"
                },
                {
                    "name": "context",
                    "desc": "Any source context.",
                    "type": "ref",
                    "refType": "SourceContext"
                }
            ]
        },
        {
            "name": "ListActiveBreakpointsResponse",
            "desc": "Response for listing active breakpoints.",
            "type": "object",
            "fields": [
                {
                    "name": "waitExpired",
                    "desc": "The `wait_expired` field is set to true by the server when the\nrequest times out and the field `success_on_timeout` is set to true.",
                    "type": "bool"
                },
                {
                    "name": "nextWaitToken",
                    "desc": "A wait token that can be used in the next method call to block until\nthe list of breakpoints changes.",
                    "type": "string"
                },
                {
                    "name": "breakpoints",
                    "desc": "List of all active breakpoints.\nThe fields `id` and `location` are guaranteed to be set on each breakpoint.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Breakpoint"
                }
            ]
        },
        {
            "name": "GerritSourceContext",
            "desc": "A SourceContext referring to a Gerrit project.",
            "type": "object",
            "fields": [
                {
                    "name": "aliasContext",
                    "desc": "An alias, which may be a branch or tag.",
                    "type": "ref",
                    "refType": "AliasContext"
                },
                {
                    "name": "hostUri",
                    "desc": "The URI of a running Gerrit instance.",
                    "type": "string"
                },
                {
                    "name": "revisionId",
                    "desc": "A revision (commit) ID.",
                    "type": "string"
                },
                {
                    "name": "aliasName",
                    "desc": "The name of an alias (branch, tag, etc.).",
                    "type": "string"
                },
                {
                    "name": "gerritProject",
                    "desc": "The full project name within the host. Projects may be nested, so\n\"project/subproject\" is a valid project name.\nThe \"repo name\" is hostURI/project.",
                    "type": "string"
                }
            ]
        }
    ],
    "resources": [
        {
            "name": "debugger",
            "resources": [
                {
                    "name": "debuggees",
                    "methods": [
                        {
                            "name": "list",
                            "desc": "Lists all the debuggees that the user can set breakpoints to.",
                            "path": "v2/debugger/debuggees",
                            "httpMethod": "GET",
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud_debugger"
                            ],
                            "optinalQueryParams": [
                                {
                                    "name": "clientVersion",
                                    "desc": "The client version making the call.\nFollowing: `domain/type/version` (e.g., `google.com/intellij/v1`).",
                                    "type": "string"
                                },
                                {
                                    "name": "includeInactive",
                                    "desc": "When set to `true`, the result includes all debuggees. Otherwise, the\nresult includes only debuggees that are active.",
                                    "type": "bool"
                                },
                                {
                                    "name": "project",
                                    "desc": "Project number of a Google Cloud project whose debuggees to list.",
                                    "type": "string"
                                }
                            ],
                            "response": "ListDebuggeesResponse"
                        }
                    ],
                    "resources": [
                        {
                            "name": "breakpoints",
                            "methods": [
                                {
                                    "name": "set",
                                    "desc": "Sets the breakpoint to the debuggee.",
                                    "path": "v2/debugger/debuggees/{debuggeeId}/breakpoints/set",
                                    "httpMethod": "POST",
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform",
                                        "https://www.googleapis.com/auth/cloud_debugger"
                                    ],
                                    "pathParams": [
                                        {
                                            "name": "debuggeeId",
                                            "desc": "ID of the debuggee where the breakpoint is to be set.",
                                            "required": true,
                                            "type": "string"
                                        }
                                    ],
                                    "optinalQueryParams": [
                                        {
                                            "name": "clientVersion",
                                            "desc": "The client version making the call.\nFollowing: `domain/type/version` (e.g., `google.com/intellij/v1`).",
                                            "type": "string"
                                        }
                                    ],
                                    "request": "Breakpoint",
                                    "response": "SetBreakpointResponse"
                                },
                                {
                                    "name": "delete",
                                    "desc": "Deletes the breakpoint from the debuggee.",
                                    "path": "v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}",
                                    "httpMethod": "DELETE",
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform",
                                        "https://www.googleapis.com/auth/cloud_debugger"
                                    ],
                                    "pathParams": [
                                        {
                                            "name": "debuggeeId",
                                            "desc": "ID of the debuggee whose breakpoint to delete.",
                                            "required": true,
                                            "type": "string"
                                        },
                                        {
                                            "name": "breakpointId",
                                            "desc": "ID of the breakpoint to delete.",
                                            "required": true,
                                            "type": "string"
                                        }
                                    ],
                                    "optinalQueryParams": [
                                        {
                                            "name": "clientVersion",
                                            "desc": "The client version making the call.\nFollowing: `domain/type/version` (e.g., `google.com/intellij/v1`).",
                                            "type": "string"
                                        }
                                    ],
                                    "response": "Empty"
                                },
                                {
                                    "name": "get",
                                    "desc": "Gets breakpoint information.",
                                    "path": "v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}",
                                    "httpMethod": "GET",
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform",
                                        "https://www.googleapis.com/auth/cloud_debugger"
                                    ],
                                    "pathParams": [
                                        {
                                            "name": "debuggeeId",
                                            "desc": "ID of the debuggee whose breakpoint to get.",
                                            "required": true,
                                            "type": "string"
                                        },
                                        {
                                            "name": "breakpointId",
                                            "desc": "ID of the breakpoint to get.",
                                            "required": true,
                                            "type": "string"
                                        }
                                    ],
                                    "optinalQueryParams": [
                                        {
                                            "name": "clientVersion",
                                            "desc": "The client version making the call.\nFollowing: `domain/type/version` (e.g., `google.com/intellij/v1`).",
                                            "type": "string"
                                        }
                                    ],
                                    "response": "GetBreakpointResponse"
                                },
                                {
                                    "name": "list",
                                    "desc": "Lists all breakpoints for the debuggee.",
                                    "path": "v2/debugger/debuggees/{debuggeeId}/breakpoints",
                                    "httpMethod": "GET",
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform",
                                        "https://www.googleapis.com/auth/cloud_debugger"
                                    ],
                                    "pathParams": [
                                        {
                                            "name": "debuggeeId",
                                            "desc": "ID of the debuggee whose breakpoints to list.",
                                            "required": true,
                                            "type": "string"
                                        }
                                    ],
                                    "optinalQueryParams": [
                                        {
                                            "name": "includeInactive",
                                            "desc": "When set to `true`, the response includes active and inactive\nbreakpoints. Otherwise, it includes only active breakpoints.",
                                            "type": "bool"
                                        },
                                        {
                                            "name": "stripResults",
                                            "desc": "This field is deprecated. The following fields are always stripped out of\nthe result: `stack_frames`, `evaluated_expressions` and `variable_table`.",
                                            "type": "bool"
                                        },
                                        {
                                            "name": "waitToken",
                                            "desc": "A wait token that, if specified, blocks the call until the breakpoints\nlist has changed, or a server selected timeout has expired.  The value\nshould be set from the last response. The error code\n`google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which\nshould be called again with the same `wait_token`.",
                                            "type": "string"
                                        },
                                        {
                                            "name": "clientVersion",
                                            "desc": "The client version making the call.\nFollowing: `domain/type/version` (e.g., `google.com/intellij/v1`).",
                                            "type": "string"
                                        },
                                        {
                                            "name": "action.value",
                                            "desc": "Only breakpoints with the specified action will pass the filter.",
                                            "type": "string",
                                            "enum": [
                                                {
                                                    "name": "CAPTURE"
                                                },
                                                {
                                                    "name": "LOG"
                                                }
                                            ]
                                        },
                                        {
                                            "name": "includeAllUsers",
                                            "desc": "When set to `true`, the response includes the list of breakpoints set by\nany user. Otherwise, it includes only breakpoints set by the caller.",
                                            "type": "bool"
                                        }
                                    ],
                                    "response": "ListBreakpointsResponse"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "controller",
            "resources": [
                {
                    "name": "debuggees",
                    "methods": [
                        {
                            "name": "register",
                            "desc": "Registers the debuggee with the controller service.\n\nAll agents attached to the same application should call this method with\nthe same request content to get back the same stable `debuggee_id`. Agents\nshould call this method again whenever `google.rpc.Code.NOT_FOUND` is\nreturned from any controller method.\n\nThis allows the controller service to disable the agent or recover from any\ndata loss. If the debuggee is disabled by the server, the response will\nhave `is_disabled` set to `true`.",
                            "path": "v2/controller/debuggees/register",
                            "httpMethod": "POST",
                            "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform",
                                "https://www.googleapis.com/auth/cloud_debugger"
                            ],
                            "request": "RegisterDebuggeeRequest",
                            "response": "RegisterDebuggeeResponse"
                        }
                    ],
                    "resources": [
                        {
                            "name": "breakpoints",
                            "methods": [
                                {
                                    "name": "list",
                                    "desc": "Returns the list of all active breakpoints for the debuggee.\n\nThe breakpoint specification (location, condition, and expression\nfields) is semantically immutable, although the field values may\nchange. For example, an agent may update the location line number\nto reflect the actual line where the breakpoint was set, but this\ndoesn't change the breakpoint semantics.\n\nThis means that an agent does not need to check if a breakpoint has changed\nwhen it encounters the same breakpoint on a successive call.\nMoreover, an agent should remember the breakpoints that are completed\nuntil the controller removes them from the active list to avoid\nsetting those breakpoints again.",
                                    "path": "v2/controller/debuggees/{debuggeeId}/breakpoints",
                                    "httpMethod": "GET",
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform",
                                        "https://www.googleapis.com/auth/cloud_debugger"
                                    ],
                                    "pathParams": [
                                        {
                                            "name": "debuggeeId",
                                            "desc": "Identifies the debuggee.",
                                            "required": true,
                                            "type": "string"
                                        }
                                    ],
                                    "optinalQueryParams": [
                                        {
                                            "name": "waitToken",
                                            "desc": "A wait token that, if specified, blocks the method call until the list\nof active breakpoints has changed, or a server selected timeout has\nexpired.  The value should be set from the last returned response.",
                                            "type": "string"
                                        },
                                        {
                                            "name": "successOnTimeout",
                                            "desc": "If set to `true`, returns `google.rpc.Code.OK` status and sets the\n`wait_expired` response field to `true` when the server-selected timeout\nhas expired (recommended).\n\nIf set to `false`, returns `google.rpc.Code.ABORTED` status when the\nserver-selected timeout has expired (deprecated).",
                                            "type": "bool"
                                        }
                                    ],
                                    "response": "ListActiveBreakpointsResponse"
                                },
                                {
                                    "name": "update",
                                    "desc": "Updates the breakpoint state or mutable fields.\nThe entire Breakpoint message must be sent back to the controller\nservice.\n\nUpdates to active breakpoint fields are only allowed if the new value\ndoes not change the breakpoint specification. Updates to the `location`,\n`condition` and `expression` fields should not alter the breakpoint\nsemantics. These may only make changes such as canonicalizing a value\nor snapping the location to the correct line of code.",
                                    "path": "v2/controller/debuggees/{debuggeeId}/breakpoints/{id}",
                                    "httpMethod": "PUT",
                                    "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform",
                                        "https://www.googleapis.com/auth/cloud_debugger"
                                    ],
                                    "pathParams": [
                                        {
                                            "name": "debuggeeId",
                                            "desc": "Identifies the debuggee being debugged.",
                                            "required": true,
                                            "type": "string"
                                        },
                                        {
                                            "name": "id",
                                            "desc": "Breakpoint identifier, unique in the scope of the debuggee.",
                                            "required": true,
                                            "type": "string"
                                        }
                                    ],
                                    "request": "UpdateActiveBreakpointRequest",
                                    "response": "UpdateActiveBreakpointResponse"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}