{
    "kind": "discovery#restDescription",
    "etag": "",
    "discoveryVersion": "v1",
    "id": "vision:v1",
    "name": "vision",
    "version": "v1",
    "title": "Google Cloud Vision API",
    "description": "Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.",
    "documentationLink": "https://cloud.google.com/vision/",
    "protocol": "rest",
    "rootUrl": "https://vision.googleapis.com/",
    "auth": {
        "oauth2": [
            "https://www.googleapis.com/auth/cloud-platform"
        ]
    },
    "parameters": [
        {
            "name": "upload_protocol",
            "desc": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
            "type": "string"
        },
        {
            "name": "fields",
            "desc": "Selector specifying which fields to include in a partial response.",
            "type": "string"
        },
        {
            "name": "callback",
            "desc": "JSONP",
            "type": "string"
        },
        {
            "name": "access_token",
            "desc": "OAuth access token.",
            "type": "string"
        },
        {
            "name": "oauth_token",
            "desc": "OAuth 2.0 token for the current user.",
            "type": "string"
        },
        {
            "name": "pp",
            "desc": "Pretty-print response.",
            "type": "bool",
            "default": "true"
        },
        {
            "name": "bearer_token",
            "desc": "OAuth bearer token.",
            "type": "string"
        },
        {
            "name": "prettyPrint",
            "desc": "Returns response with indentations and line breaks.",
            "type": "bool",
            "default": "true"
        },
        {
            "name": "uploadType",
            "desc": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
            "type": "string"
        },
        {
            "name": "$.xgafv",
            "desc": "V1 error format.",
            "type": "string",
            "enum": [
                {
                    "name": "1",
                    "desc": "v1 error format"
                },
                {
                    "name": "2",
                    "desc": "v2 error format"
                }
            ]
        },
        {
            "name": "alt",
            "desc": "Data format for response.",
            "type": "string",
            "default": "json",
            "enum": [
                {
                    "name": "json",
                    "desc": "Responses with Content-Type of application/json"
                },
                {
                    "name": "media",
                    "desc": "Media download with context-dependent Content-Type"
                },
                {
                    "name": "proto",
                    "desc": "Responses with Content-Type of application/x-protobuf"
                }
            ]
        },
        {
            "name": "key",
            "desc": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
            "type": "string"
        },
        {
            "name": "quotaUser",
            "desc": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
            "type": "string"
        }
    ],
    "schemas": [
        {
            "name": "Page",
            "desc": "Detected page from OCR.",
            "type": "object",
            "fields": [
                {
                    "name": "width",
                    "desc": "Page width in pixels.",
                    "type": "int32"
                },
                {
                    "name": "blocks",
                    "desc": "List of blocks of text, images etc on this page.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Block"
                },
                {
                    "name": "property",
                    "desc": "Additional information detected on the page.",
                    "type": "ref",
                    "refType": "TextProperty"
                },
                {
                    "name": "height",
                    "desc": "Page height in pixels.",
                    "type": "int32"
                }
            ]
        },
        {
            "name": "AnnotateImageResponse",
            "desc": "Response to an image annotation request.",
            "type": "object",
            "fields": [
                {
                    "name": "webDetection",
                    "desc": "If present, web detection has completed successfully.",
                    "type": "ref",
                    "refType": "WebDetection"
                },
                {
                    "name": "cropHintsAnnotation",
                    "desc": "If present, crop hints have completed successfully.",
                    "type": "ref",
                    "refType": "CropHintsAnnotation"
                },
                {
                    "name": "error",
                    "desc": "If set, represents the error message for the operation.\nNote that filled-in image annotations are guaranteed to be\ncorrect, even when `error` is set.",
                    "type": "ref",
                    "refType": "Status"
                },
                {
                    "name": "fullTextAnnotation",
                    "desc": "If present, text (OCR) detection or document (OCR) text detection has\ncompleted successfully.\nThis annotation provides the structural hierarchy for the OCR detected\ntext.",
                    "type": "ref",
                    "refType": "TextAnnotation"
                },
                {
                    "name": "textAnnotations",
                    "desc": "If present, text (OCR) detection has completed successfully.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "EntityAnnotation"
                },
                {
                    "name": "faceAnnotations",
                    "desc": "If present, face detection has completed successfully.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "FaceAnnotation"
                },
                {
                    "name": "imagePropertiesAnnotation",
                    "desc": "If present, image properties were extracted successfully.",
                    "type": "ref",
                    "refType": "ImageProperties"
                },
                {
                    "name": "logoAnnotations",
                    "desc": "If present, logo detection has completed successfully.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "EntityAnnotation"
                },
                {
                    "name": "landmarkAnnotations",
                    "desc": "If present, landmark detection has completed successfully.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "EntityAnnotation"
                },
                {
                    "name": "labelAnnotations",
                    "desc": "If present, label detection has completed successfully.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "EntityAnnotation"
                },
                {
                    "name": "safeSearchAnnotation",
                    "desc": "If present, safe-search annotation has completed successfully.",
                    "type": "ref",
                    "refType": "SafeSearchAnnotation"
                }
            ]
        },
        {
            "name": "WebPage",
            "desc": "Metadata for web pages.",
            "type": "object",
            "fields": [
                {
                    "name": "score",
                    "desc": "Overall relevancy score for the web page.\nNot normalized and not comparable across different image queries.",
                    "type": "float32"
                },
                {
                    "name": "url",
                    "desc": "The result web page URL.",
                    "type": "string"
                }
            ]
        },
        {
            "name": "LatLongRect",
            "desc": "Rectangle determined by min and max `LatLng` pairs.",
            "type": "object",
            "fields": [
                {
                    "name": "minLatLng",
                    "desc": "Min lat/long pair.",
                    "type": "ref",
                    "refType": "LatLng"
                },
                {
                    "name": "maxLatLng",
                    "desc": "Max lat/long pair.",
                    "type": "ref",
                    "refType": "LatLng"
                }
            ]
        },
        {
            "name": "Color",
            "desc": "Represents a color in the RGBA color space. This representation is designed\nfor simplicity of conversion to/from color representations in various\nlanguages over compactness; for example, the fields of this representation\ncan be trivially provided to the constructor of \"java.awt.Color\" in Java; it\ncan also be trivially provided to UIColor's \"+colorWithRed:green:blue:alpha\"\nmethod in iOS; and, with just a little work, it can be easily formatted into\na CSS \"rgba()\" string in JavaScript, as well. Here are some examples:\n\nExample (Java):\n\n     import com.google.type.Color;\n\n     // ...\n     public static java.awt.Color fromProto(Color protocolor) {\n       float alpha = protocolor.hasAlpha()\n           ? protocolor.getAlpha().getValue()\n           : 1.0;\n\n       return new java.awt.Color(\n           protocolor.getRed(),\n           protocolor.getGreen(),\n           protocolor.getBlue(),\n           alpha);\n     }\n\n     public static Color toProto(java.awt.Color color) {\n       float red = (float) color.getRed();\n       float green = (float) color.getGreen();\n       float blue = (float) color.getBlue();\n       float denominator = 255.0;\n       Color.Builder resultBuilder =\n           Color\n               .newBuilder()\n               .setRed(red / denominator)\n               .setGreen(green / denominator)\n               .setBlue(blue / denominator);\n       int alpha = color.getAlpha();\n       if (alpha != 255) {\n         result.setAlpha(\n             FloatValue\n                 .newBuilder()\n                 .setValue(((float) alpha) / denominator)\n                 .build());\n       }\n       return resultBuilder.build();\n     }\n     // ...\n\nExample (iOS / Obj-C):\n\n     // ...\n     static UIColor* fromProto(Color* protocolor) {\n        float red = [protocolor red];\n        float green = [protocolor green];\n        float blue = [protocolor blue];\n        FloatValue* alpha_wrapper = [protocolor alpha];\n        float alpha = 1.0;\n        if (alpha_wrapper != nil) {\n          alpha = [alpha_wrapper value];\n        }\n        return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];\n     }\n\n     static Color* toProto(UIColor* color) {\n         CGFloat red, green, blue, alpha;\n         if (![color getRed:\u0026red green:\u0026green blue:\u0026blue alpha:\u0026alpha]) {\n           return nil;\n         }\n         Color* result = [Color alloc] init];\n         [result setRed:red];\n         [result setGreen:green];\n         [result setBlue:blue];\n         if (alpha \u003c= 0.9999) {\n           [result setAlpha:floatWrapperWithValue(alpha)];\n         }\n         [result autorelease];\n         return result;\n    }\n    // ...\n\n Example (JavaScript):\n\n    // ...\n\n    var protoToCssColor = function(rgb_color) {\n       var redFrac = rgb_color.red || 0.0;\n       var greenFrac = rgb_color.green || 0.0;\n       var blueFrac = rgb_color.blue || 0.0;\n       var red = Math.floor(redFrac * 255);\n       var green = Math.floor(greenFrac * 255);\n       var blue = Math.floor(blueFrac * 255);\n\n       if (!('alpha' in rgb_color)) {\n          return rgbToCssColor_(red, green, blue);\n       }\n\n       var alphaFrac = rgb_color.alpha.value || 0.0;\n       var rgbParams = [red, green, blue].join(',');\n       return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');\n    };\n\n    var rgbToCssColor_ = function(red, green, blue) {\n      var rgbNumber = new Number((red \u003c\u003c 16) | (green \u003c\u003c 8) | blue);\n      var hexString = rgbNumber.toString(16);\n      var missingZeros = 6 - hexString.length;\n      var resultBuilder = ['#'];\n      for (var i = 0; i \u003c missingZeros; i++) {\n         resultBuilder.push('0');\n      }\n      resultBuilder.push(hexString);\n      return resultBuilder.join('');\n    };\n\n    // ...",
            "type": "object",
            "fields": [
                {
                    "name": "red",
                    "desc": "The amount of red in the color as a value in the interval [0, 1].",
                    "type": "float32"
                },
                {
                    "name": "green",
                    "desc": "The amount of green in the color as a value in the interval [0, 1].",
                    "type": "float32"
                },
                {
                    "name": "blue",
                    "desc": "The amount of blue in the color as a value in the interval [0, 1].",
                    "type": "float32"
                },
                {
                    "name": "alpha",
                    "desc": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
                    "type": "float32"
                }
            ]
        },
        {
            "name": "Vertex",
            "desc": "A vertex represents a 2D point in the image.\nNOTE: the vertex coordinates are in the same scale as the original image.",
            "type": "object",
            "fields": [
                {
                    "name": "y",
                    "desc": "Y coordinate.",
                    "type": "int32"
                },
                {
                    "name": "x",
                    "desc": "X coordinate.",
                    "type": "int32"
                }
            ]
        },
        {
            "name": "Block",
            "desc": "Logical element on the page.",
            "type": "object",
            "fields": [
                {
                    "name": "property",
                    "desc": "Additional information detected for the block.",
                    "type": "ref",
                    "refType": "TextProperty"
                },
                {
                    "name": "blockType",
                    "desc": "Detected block type (text, image etc) for this block.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN",
                            "desc": "Unknown block type."
                        },
                        {
                            "name": "TEXT",
                            "desc": "Regular text block."
                        },
                        {
                            "name": "TABLE",
                            "desc": "Table block."
                        },
                        {
                            "name": "PICTURE",
                            "desc": "Image block."
                        },
                        {
                            "name": "RULER",
                            "desc": "Horizontal/vertical line box."
                        },
                        {
                            "name": "BARCODE",
                            "desc": "Barcode block."
                        }
                    ]
                },
                {
                    "name": "boundingBox",
                    "desc": "The bounding box for the block.\nThe vertices are in the order of top-left, top-right, bottom-right,\nbottom-left. When a rotation of the bounding box is detected the rotation\nis represented as around the top-left corner as defined when the text is\nread in the 'natural' orientation.\nFor example:\n  * when the text is horizontal it might look like:\n     0----1\n     |    |\n     3----2\n  * when it's rotated 180 degrees around the top-left corner it becomes:\n     2----3\n     |    |\n     1----0\n  and the vertice order will still be (0, 1, 2, 3).",
                    "type": "ref",
                    "refType": "BoundingPoly"
                },
                {
                    "name": "paragraphs",
                    "desc": "List of paragraphs in this block (if this blocks is of type text).",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Paragraph"
                }
            ]
        },
        {
            "name": "BatchAnnotateImagesResponse",
            "desc": "Response to a batch image annotation request.",
            "type": "object",
            "fields": [
                {
                    "name": "responses",
                    "desc": "Individual responses to image annotation requests within the batch.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "AnnotateImageResponse"
                }
            ]
        },
        {
            "name": "CropHintsAnnotation",
            "desc": "Set of crop hints that are used to generate new crops when serving images.",
            "type": "object",
            "fields": [
                {
                    "name": "cropHints",
                    "desc": "Crop hint results.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "CropHint"
                }
            ]
        },
        {
            "name": "SafeSearchAnnotation",
            "desc": "Set of features pertaining to the image, computed by computer vision\nmethods over safe-search verticals (for example, adult, spoof, medical,\nviolence).",
            "type": "object",
            "fields": [
                {
                    "name": "medical",
                    "desc": "Likelihood that this is a medical image.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN",
                            "desc": "Unknown likelihood."
                        },
                        {
                            "name": "VERY_UNLIKELY",
                            "desc": "It is very unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "UNLIKELY",
                            "desc": "It is unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "POSSIBLE",
                            "desc": "It is possible that the image belongs to the specified vertical."
                        },
                        {
                            "name": "LIKELY",
                            "desc": "It is likely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "VERY_LIKELY",
                            "desc": "It is very likely that the image belongs to the specified vertical."
                        }
                    ]
                },
                {
                    "name": "violence",
                    "desc": "Violence likelihood.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN",
                            "desc": "Unknown likelihood."
                        },
                        {
                            "name": "VERY_UNLIKELY",
                            "desc": "It is very unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "UNLIKELY",
                            "desc": "It is unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "POSSIBLE",
                            "desc": "It is possible that the image belongs to the specified vertical."
                        },
                        {
                            "name": "LIKELY",
                            "desc": "It is likely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "VERY_LIKELY",
                            "desc": "It is very likely that the image belongs to the specified vertical."
                        }
                    ]
                },
                {
                    "name": "adult",
                    "desc": "Represents the adult content likelihood for the image.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN",
                            "desc": "Unknown likelihood."
                        },
                        {
                            "name": "VERY_UNLIKELY",
                            "desc": "It is very unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "UNLIKELY",
                            "desc": "It is unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "POSSIBLE",
                            "desc": "It is possible that the image belongs to the specified vertical."
                        },
                        {
                            "name": "LIKELY",
                            "desc": "It is likely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "VERY_LIKELY",
                            "desc": "It is very likely that the image belongs to the specified vertical."
                        }
                    ]
                },
                {
                    "name": "spoof",
                    "desc": "Spoof likelihood. The likelihood that an modification\nwas made to the image's canonical version to make it appear\nfunny or offensive.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN",
                            "desc": "Unknown likelihood."
                        },
                        {
                            "name": "VERY_UNLIKELY",
                            "desc": "It is very unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "UNLIKELY",
                            "desc": "It is unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "POSSIBLE",
                            "desc": "It is possible that the image belongs to the specified vertical."
                        },
                        {
                            "name": "LIKELY",
                            "desc": "It is likely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "VERY_LIKELY",
                            "desc": "It is very likely that the image belongs to the specified vertical."
                        }
                    ]
                }
            ]
        },
        {
            "name": "TextProperty",
            "desc": "Additional information detected on the structural component.",
            "type": "object",
            "fields": [
                {
                    "name": "detectedLanguages",
                    "desc": "A list of detected languages together with confidence.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "DetectedLanguage"
                },
                {
                    "name": "detectedBreak",
                    "desc": "Detected start or end of a text segment.",
                    "type": "ref",
                    "refType": "DetectedBreak"
                }
            ]
        },
        {
            "name": "LocationInfo",
            "desc": "Detected entity location information.",
            "type": "object",
            "fields": [
                {
                    "name": "latLng",
                    "desc": "lat/long location coordinates.",
                    "type": "ref",
                    "refType": "LatLng"
                }
            ]
        },
        {
            "name": "ImageSource",
            "desc": "External image source (Google Cloud Storage image location).",
            "type": "object",
            "fields": [
                {
                    "name": "imageUri",
                    "desc": "Image URI which supports:\n1) Google Cloud Storage image URI, which must be in the following form:\n`gs://bucket_name/object_name` (for details, see\n[Google Cloud Storage Request\nURIs](https://cloud.google.com/storage/docs/reference-uris)).\nNOTE: Cloud Storage object versioning is not supported.\n2) Publicly accessible image HTTP/HTTPS URL.\nThis is preferred over the legacy `gcs_image_uri` above. When both\n`gcs_image_uri` and `image_uri` are specified, `image_uri` takes\nprecedence.",
                    "type": "string"
                },
                {
                    "name": "gcsImageUri",
                    "desc": "NOTE: For new code `image_uri` below is preferred.\nGoogle Cloud Storage image URI, which must be in the following form:\n`gs://bucket_name/object_name` (for details, see\n[Google Cloud Storage Request\nURIs](https://cloud.google.com/storage/docs/reference-uris)).\nNOTE: Cloud Storage object versioning is not supported.",
                    "type": "string"
                }
            ]
        },
        {
            "name": "WebDetection",
            "desc": "Relevant information for the image from the Internet.",
            "type": "object",
            "fields": [
                {
                    "name": "fullMatchingImages",
                    "desc": "Fully matching images from the Internet.\nThey're definite neardups and most often a copy of the query image with\nmerely a size change.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "WebImage"
                },
                {
                    "name": "webEntities",
                    "desc": "Deduced entities from similar images on the Internet.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "WebEntity"
                },
                {
                    "name": "pagesWithMatchingImages",
                    "desc": "Web pages containing the matching images from the Internet.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "WebPage"
                },
                {
                    "name": "partialMatchingImages",
                    "desc": "Partial matching images from the Internet.\nThose images are similar enough to share some key-point features. For\nexample an original image will likely have partial matching for its crops.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "WebImage"
                }
            ]
        },
        {
            "name": "CropHint",
            "desc": "Single crop hint that is used to generate a new crop when serving an image.",
            "type": "object",
            "fields": [
                {
                    "name": "confidence",
                    "desc": "Confidence of this being a salient region.  Range [0, 1].",
                    "type": "float32"
                },
                {
                    "name": "importanceFraction",
                    "desc": "Fraction of importance of this salient region with respect to the original\nimage.",
                    "type": "float32"
                },
                {
                    "name": "boundingPoly",
                    "desc": "The bounding polygon for the crop region. The coordinates of the bounding\nbox are in the original image's scale, as returned in `ImageParams`.",
                    "type": "ref",
                    "refType": "BoundingPoly"
                }
            ]
        },
        {
            "name": "Image",
            "desc": "Client image to perform Google Cloud Vision API tasks over.",
            "type": "object",
            "fields": [
                {
                    "name": "content",
                    "desc": "Image content, represented as a stream of bytes.\nNote: as with all `bytes` fields, protobuffers use a pure binary\nrepresentation, whereas JSON representations use base64.",
                    "type": "byte"
                },
                {
                    "name": "source",
                    "desc": "Google Cloud Storage image location. If both `content` and `source`\nare provided for an image, `content` takes precedence and is\nused to perform the image annotation request.",
                    "type": "ref",
                    "refType": "ImageSource"
                }
            ]
        },
        {
            "name": "BatchAnnotateImagesRequest",
            "desc": "Multiple image annotation requests are batched into a single service call.",
            "type": "object",
            "fields": [
                {
                    "name": "requests",
                    "desc": "Individual image annotation requests for this batch.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "AnnotateImageRequest"
                }
            ]
        },
        {
            "name": "ImageContext",
            "desc": "Image context and/or feature-specific parameters.",
            "type": "object",
            "fields": [
                {
                    "name": "cropHintsParams",
                    "desc": "Parameters for crop hints annotation request.",
                    "type": "ref",
                    "refType": "CropHintsParams"
                },
                {
                    "name": "languageHints",
                    "desc": "List of languages to use for TEXT_DETECTION. In most cases, an empty value\nyields the best results since it enables automatic language detection. For\nlanguages based on the Latin alphabet, setting `language_hints` is not\nneeded. In rare cases, when the language of the text in the image is known,\nsetting a hint will help get better results (although it will be a\nsignificant hindrance if the hint is wrong). Text detection returns an\nerror if one or more of the specified languages is not one of the\n[supported languages](/vision/docs/languages).",
                    "collection": "array",
                    "type": "string"
                },
                {
                    "name": "latLongRect",
                    "desc": "lat/long rectangle that specifies the location of the image.",
                    "type": "ref",
                    "refType": "LatLongRect"
                }
            ]
        },
        {
            "name": "DetectedLanguage",
            "desc": "Detected language for a structural component.",
            "type": "object",
            "fields": [
                {
                    "name": "languageCode",
                    "desc": "The BCP-47 language code, such as \"en-US\" or \"sr-Latn\". For more\ninformation, see\nhttp://www.unicode.org/reports/tr35/#Unicode_locale_identifier.",
                    "type": "string"
                },
                {
                    "name": "confidence",
                    "desc": "Confidence of detected language. Range [0, 1].",
                    "type": "float32"
                }
            ]
        },
        {
            "name": "BoundingPoly",
            "desc": "A bounding polygon for the detected image annotation.",
            "type": "object",
            "fields": [
                {
                    "name": "vertices",
                    "desc": "The bounding polygon vertices.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Vertex"
                }
            ]
        },
        {
            "name": "LatLng",
            "desc": "An object representing a latitude/longitude pair. This is expressed as a pair\nof doubles representing degrees latitude and degrees longitude. Unless\nspecified otherwise, this must conform to the\n\u003ca href=\"http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf\"\u003eWGS84\nstandard\u003c/a\u003e. Values must be within normalized ranges.\n\nExample of normalization code in Python:\n\n    def NormalizeLongitude(longitude):\n      \"\"\"Wraps decimal degrees longitude to [-180.0, 180.0].\"\"\"\n      q, r = divmod(longitude, 360.0)\n      if r \u003e 180.0 or (r == 180.0 and q \u003c= -1.0):\n        return r - 360.0\n      return r\n\n    def NormalizeLatLng(latitude, longitude):\n      \"\"\"Wraps decimal degrees latitude and longitude to\n      [-90.0, 90.0] and [-180.0, 180.0], respectively.\"\"\"\n      r = latitude % 360.0\n      if r \u003c= 90.0:\n        return r, NormalizeLongitude(longitude)\n      elif r \u003e= 270.0:\n        return r - 360, NormalizeLongitude(longitude)\n      else:\n        return 180 - r, NormalizeLongitude(longitude + 180.0)\n\n    assert 180.0 == NormalizeLongitude(180.0)\n    assert -180.0 == NormalizeLongitude(-180.0)\n    assert -179.0 == NormalizeLongitude(181.0)\n    assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)\n    assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)\n    assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0)\n    assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)\n    assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)\n    assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0)\n    assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)\n    assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)\n    assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)\n    assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)\n\nThe code in logs/storage/validator/logs_validator_traits.cc treats this type\nas if it were annotated as ST_LOCATION.",
            "type": "object",
            "fields": [
                {
                    "name": "latitude",
                    "desc": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
                    "type": "float64"
                },
                {
                    "name": "longitude",
                    "desc": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
                    "type": "float64"
                }
            ]
        },
        {
            "name": "Feature",
            "desc": "Users describe the type of Google Cloud Vision API tasks to perform over\nimages by using *Feature*s. Each Feature indicates a type of image\ndetection task to perform. Features encode the Cloud Vision API\nvertical to operate on and the number of top-scoring results to return.",
            "type": "object",
            "fields": [
                {
                    "name": "maxResults",
                    "desc": "Maximum number of results of this type.",
                    "type": "int32"
                },
                {
                    "name": "type",
                    "desc": "The feature type.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "TYPE_UNSPECIFIED",
                            "desc": "Unspecified feature type."
                        },
                        {
                            "name": "FACE_DETECTION",
                            "desc": "Run face detection."
                        },
                        {
                            "name": "LANDMARK_DETECTION",
                            "desc": "Run landmark detection."
                        },
                        {
                            "name": "LOGO_DETECTION",
                            "desc": "Run logo detection."
                        },
                        {
                            "name": "LABEL_DETECTION",
                            "desc": "Run label detection."
                        },
                        {
                            "name": "TEXT_DETECTION",
                            "desc": "Run OCR."
                        },
                        {
                            "name": "DOCUMENT_TEXT_DETECTION",
                            "desc": "Run dense text document OCR. Takes precedence when both\nDOCUMENT_TEXT_DETECTION and TEXT_DETECTION are present."
                        },
                        {
                            "name": "SAFE_SEARCH_DETECTION",
                            "desc": "Run computer vision models to compute image safe-search properties."
                        },
                        {
                            "name": "IMAGE_PROPERTIES",
                            "desc": "Compute a set of image properties, such as the image's dominant colors."
                        },
                        {
                            "name": "CROP_HINTS",
                            "desc": "Run crop hints."
                        },
                        {
                            "name": "WEB_DETECTION",
                            "desc": "Run web detection."
                        }
                    ]
                }
            ]
        },
        {
            "name": "TextAnnotation",
            "desc": "TextAnnotation contains a structured representation of OCR extracted text.\nThe hierarchy of an OCR extracted text structure is like this:\n    TextAnnotation -\u003e Page -\u003e Block -\u003e Paragraph -\u003e Word -\u003e Symbol\nEach structural component, starting from Page, may further have their own\nproperties. Properties describe detected languages, breaks etc.. Please\nrefer to the google.cloud.vision.v1.TextAnnotation.TextProperty message\ndefinition below for more detail.",
            "type": "object",
            "fields": [
                {
                    "name": "pages",
                    "desc": "List of pages detected by OCR.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Page"
                },
                {
                    "name": "text",
                    "desc": "UTF-8 text detected on the pages.",
                    "type": "string"
                }
            ]
        },
        {
            "name": "WebEntity",
            "desc": "Entity deduced from similar images on the Internet.",
            "type": "object",
            "fields": [
                {
                    "name": "entityId",
                    "desc": "Opaque entity ID.",
                    "type": "string"
                },
                {
                    "name": "description",
                    "desc": "Canonical description of the entity, in English.",
                    "type": "string"
                },
                {
                    "name": "score",
                    "desc": "Overall relevancy score for the entity.\nNot normalized and not comparable across different image queries.",
                    "type": "float32"
                }
            ]
        },
        {
            "name": "EntityAnnotation",
            "desc": "Set of detected entity features.",
            "type": "object",
            "fields": [
                {
                    "name": "boundingPoly",
                    "desc": "Image region to which this entity belongs. Currently not produced\nfor `LABEL_DETECTION` features. For `TEXT_DETECTION` (OCR), `boundingPoly`s\nare produced for the entire text detected in an image region, followed by\n`boundingPoly`s for each word within the detected text.",
                    "type": "ref",
                    "refType": "BoundingPoly"
                },
                {
                    "name": "locale",
                    "desc": "The language code for the locale in which the entity textual\n`description` is expressed.",
                    "type": "string"
                },
                {
                    "name": "topicality",
                    "desc": "The relevancy of the ICA (Image Content Annotation) label to the\nimage. For example, the relevancy of \"tower\" is likely higher to an image\ncontaining the detected \"Eiffel Tower\" than to an image containing a\ndetected distant towering building, even though the confidence that\nthere is a tower in each image may be the same. Range [0, 1].",
                    "type": "float32"
                },
                {
                    "name": "properties",
                    "desc": "Some entities may have optional user-supplied `Property` (name/value)\nfields, such a score or string that qualifies the entity.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Property"
                },
                {
                    "name": "score",
                    "desc": "Overall score of the result. Range [0, 1].",
                    "type": "float32"
                },
                {
                    "name": "locations",
                    "desc": "The location information for the detected entity. Multiple\n`LocationInfo` elements can be present because one location may\nindicate the location of the scene in the image, and another location\nmay indicate the location of the place where the image was taken.\nLocation information is usually present for landmarks.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "LocationInfo"
                },
                {
                    "name": "mid",
                    "desc": "Opaque entity ID. Some IDs may be available in\n[Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).",
                    "type": "string"
                },
                {
                    "name": "confidence",
                    "desc": "The accuracy of the entity detection in an image.\nFor example, for an image in which the \"Eiffel Tower\" entity is detected,\nthis field represents the confidence that there is a tower in the query\nimage. Range [0, 1].",
                    "type": "float32"
                },
                {
                    "name": "description",
                    "desc": "Entity textual description, expressed in its `locale` language.",
                    "type": "string"
                }
            ]
        },
        {
            "name": "Paragraph",
            "desc": "Structural unit of text representing a number of words in certain order.",
            "type": "object",
            "fields": [
                {
                    "name": "boundingBox",
                    "desc": "The bounding box for the paragraph.\nThe vertices are in the order of top-left, top-right, bottom-right,\nbottom-left. When a rotation of the bounding box is detected the rotation\nis represented as around the top-left corner as defined when the text is\nread in the 'natural' orientation.\nFor example:\n  * when the text is horizontal it might look like:\n     0----1\n     |    |\n     3----2\n  * when it's rotated 180 degrees around the top-left corner it becomes:\n     2----3\n     |    |\n     1----0\n  and the vertice order will still be (0, 1, 2, 3).",
                    "type": "ref",
                    "refType": "BoundingPoly"
                },
                {
                    "name": "words",
                    "desc": "List of words in this paragraph.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Word"
                },
                {
                    "name": "property",
                    "desc": "Additional information detected for the paragraph.",
                    "type": "ref",
                    "refType": "TextProperty"
                }
            ]
        },
        {
            "name": "DetectedBreak",
            "desc": "Detected start or end of a structural component.",
            "type": "object",
            "fields": [
                {
                    "name": "type",
                    "desc": "Detected break type.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN",
                            "desc": "Unknown break label type."
                        },
                        {
                            "name": "SPACE",
                            "desc": "Regular space."
                        },
                        {
                            "name": "SURE_SPACE",
                            "desc": "Sure space (very wide)."
                        },
                        {
                            "name": "EOL_SURE_SPACE",
                            "desc": "Line-wrapping break."
                        },
                        {
                            "name": "HYPHEN",
                            "desc": "End-line hyphen that is not present in text; does"
                        },
                        {
                            "name": "LINE_BREAK",
                            "desc": "not co-occur with SPACE, LEADER_SPACE, or\nLINE_BREAK.\nLine break that ends a paragraph."
                        }
                    ]
                },
                {
                    "name": "isPrefix",
                    "desc": "True if break prepends the element.",
                    "type": "bool"
                }
            ]
        },
        {
            "name": "Symbol",
            "desc": "A single symbol representation.",
            "type": "object",
            "fields": [
                {
                    "name": "text",
                    "desc": "The actual UTF-8 representation of the symbol.",
                    "type": "string"
                },
                {
                    "name": "property",
                    "desc": "Additional information detected for the symbol.",
                    "type": "ref",
                    "refType": "TextProperty"
                },
                {
                    "name": "boundingBox",
                    "desc": "The bounding box for the symbol.\nThe vertices are in the order of top-left, top-right, bottom-right,\nbottom-left. When a rotation of the bounding box is detected the rotation\nis represented as around the top-left corner as defined when the text is\nread in the 'natural' orientation.\nFor example:\n  * when the text is horizontal it might look like:\n     0----1\n     |    |\n     3----2\n  * when it's rotated 180 degrees around the top-left corner it becomes:\n     2----3\n     |    |\n     1----0\n  and the vertice order will still be (0, 1, 2, 3).",
                    "type": "ref",
                    "refType": "BoundingPoly"
                }
            ]
        },
        {
            "name": "CropHintsParams",
            "desc": "Parameters for crop hints annotation request.",
            "type": "object",
            "fields": [
                {
                    "name": "aspectRatios",
                    "desc": "Aspect ratios in floats, representing the ratio of the width to the height\nof the image. For example, if the desired aspect ratio is 4/3, the\ncorresponding float value should be 1.33333.  If not specified, the\nbest possible crop is returned. The number of provided aspect ratios is\nlimited to a maximum of 16; any aspect ratios provided after the 16th are\nignored.",
                    "collection": "array",
                    "type": "float32"
                }
            ]
        },
        {
            "name": "ColorInfo",
            "desc": "Color information consists of RGB channels, score, and the fraction of\nthe image that the color occupies in the image.",
            "type": "object",
            "fields": [
                {
                    "name": "pixelFraction",
                    "desc": "The fraction of pixels the color occupies in the image.\nValue in range [0, 1].",
                    "type": "float32"
                },
                {
                    "name": "color",
                    "desc": "RGB components of the color.",
                    "type": "ref",
                    "refType": "Color"
                },
                {
                    "name": "score",
                    "desc": "Image-specific score for this color. Value in range [0, 1].",
                    "type": "float32"
                }
            ]
        },
        {
            "name": "Word",
            "desc": "A word representation.",
            "type": "object",
            "fields": [
                {
                    "name": "symbols",
                    "desc": "List of symbols in the word.\nThe order of the symbols follows the natural reading order.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Symbol"
                },
                {
                    "name": "property",
                    "desc": "Additional information detected for the word.",
                    "type": "ref",
                    "refType": "TextProperty"
                },
                {
                    "name": "boundingBox",
                    "desc": "The bounding box for the word.\nThe vertices are in the order of top-left, top-right, bottom-right,\nbottom-left. When a rotation of the bounding box is detected the rotation\nis represented as around the top-left corner as defined when the text is\nread in the 'natural' orientation.\nFor example:\n  * when the text is horizontal it might look like:\n     0----1\n     |    |\n     3----2\n  * when it's rotated 180 degrees around the top-left corner it becomes:\n     2----3\n     |    |\n     1----0\n  and the vertice order will still be (0, 1, 2, 3).",
                    "type": "ref",
                    "refType": "BoundingPoly"
                }
            ]
        },
        {
            "name": "FaceAnnotation",
            "desc": "A face annotation object contains the results of face detection.",
            "type": "object",
            "fields": [
                {
                    "name": "panAngle",
                    "desc": "Yaw angle, which indicates the leftward/rightward angle that the face is\npointing relative to the vertical plane perpendicular to the image. Range\n[-180,180].",
                    "type": "float32"
                },
                {
                    "name": "rollAngle",
                    "desc": "Roll angle, which indicates the amount of clockwise/anti-clockwise rotation\nof the face relative to the image vertical about the axis perpendicular to\nthe face. Range [-180,180].",
                    "type": "float32"
                },
                {
                    "name": "angerLikelihood",
                    "desc": "Anger likelihood.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN",
                            "desc": "Unknown likelihood."
                        },
                        {
                            "name": "VERY_UNLIKELY",
                            "desc": "It is very unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "UNLIKELY",
                            "desc": "It is unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "POSSIBLE",
                            "desc": "It is possible that the image belongs to the specified vertical."
                        },
                        {
                            "name": "LIKELY",
                            "desc": "It is likely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "VERY_LIKELY",
                            "desc": "It is very likely that the image belongs to the specified vertical."
                        }
                    ]
                },
                {
                    "name": "surpriseLikelihood",
                    "desc": "Surprise likelihood.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN",
                            "desc": "Unknown likelihood."
                        },
                        {
                            "name": "VERY_UNLIKELY",
                            "desc": "It is very unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "UNLIKELY",
                            "desc": "It is unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "POSSIBLE",
                            "desc": "It is possible that the image belongs to the specified vertical."
                        },
                        {
                            "name": "LIKELY",
                            "desc": "It is likely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "VERY_LIKELY",
                            "desc": "It is very likely that the image belongs to the specified vertical."
                        }
                    ]
                },
                {
                    "name": "landmarks",
                    "desc": "Detected face landmarks.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Landmark"
                },
                {
                    "name": "joyLikelihood",
                    "desc": "Joy likelihood.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN",
                            "desc": "Unknown likelihood."
                        },
                        {
                            "name": "VERY_UNLIKELY",
                            "desc": "It is very unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "UNLIKELY",
                            "desc": "It is unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "POSSIBLE",
                            "desc": "It is possible that the image belongs to the specified vertical."
                        },
                        {
                            "name": "LIKELY",
                            "desc": "It is likely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "VERY_LIKELY",
                            "desc": "It is very likely that the image belongs to the specified vertical."
                        }
                    ]
                },
                {
                    "name": "blurredLikelihood",
                    "desc": "Blurred likelihood.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN",
                            "desc": "Unknown likelihood."
                        },
                        {
                            "name": "VERY_UNLIKELY",
                            "desc": "It is very unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "UNLIKELY",
                            "desc": "It is unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "POSSIBLE",
                            "desc": "It is possible that the image belongs to the specified vertical."
                        },
                        {
                            "name": "LIKELY",
                            "desc": "It is likely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "VERY_LIKELY",
                            "desc": "It is very likely that the image belongs to the specified vertical."
                        }
                    ]
                },
                {
                    "name": "fdBoundingPoly",
                    "desc": "The `fd_bounding_poly` bounding polygon is tighter than the\n`boundingPoly`, and encloses only the skin part of the face. Typically, it\nis used to eliminate the face from any image analysis that detects the\n\"amount of skin\" visible in an image. It is not based on the\nlandmarker results, only on the initial face detection, hence\nthe \u003ccode\u003efd\u003c/code\u003e (face detection) prefix.",
                    "type": "ref",
                    "refType": "BoundingPoly"
                },
                {
                    "name": "landmarkingConfidence",
                    "desc": "Face landmarking confidence. Range [0, 1].",
                    "type": "float32"
                },
                {
                    "name": "detectionConfidence",
                    "desc": "Detection confidence. Range [0, 1].",
                    "type": "float32"
                },
                {
                    "name": "headwearLikelihood",
                    "desc": "Headwear likelihood.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN",
                            "desc": "Unknown likelihood."
                        },
                        {
                            "name": "VERY_UNLIKELY",
                            "desc": "It is very unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "UNLIKELY",
                            "desc": "It is unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "POSSIBLE",
                            "desc": "It is possible that the image belongs to the specified vertical."
                        },
                        {
                            "name": "LIKELY",
                            "desc": "It is likely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "VERY_LIKELY",
                            "desc": "It is very likely that the image belongs to the specified vertical."
                        }
                    ]
                },
                {
                    "name": "tiltAngle",
                    "desc": "Pitch angle, which indicates the upwards/downwards angle that the face is\npointing relative to the image's horizontal plane. Range [-180,180].",
                    "type": "float32"
                },
                {
                    "name": "boundingPoly",
                    "desc": "The bounding polygon around the face. The coordinates of the bounding box\nare in the original image's scale, as returned in `ImageParams`.\nThe bounding box is computed to \"frame\" the face in accordance with human\nexpectations. It is based on the landmarker results.\nNote that one or more x and/or y coordinates may not be generated in the\n`BoundingPoly` (the polygon will be unbounded) if only a partial face\nappears in the image to be annotated.",
                    "type": "ref",
                    "refType": "BoundingPoly"
                },
                {
                    "name": "sorrowLikelihood",
                    "desc": "Sorrow likelihood.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN",
                            "desc": "Unknown likelihood."
                        },
                        {
                            "name": "VERY_UNLIKELY",
                            "desc": "It is very unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "UNLIKELY",
                            "desc": "It is unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "POSSIBLE",
                            "desc": "It is possible that the image belongs to the specified vertical."
                        },
                        {
                            "name": "LIKELY",
                            "desc": "It is likely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "VERY_LIKELY",
                            "desc": "It is very likely that the image belongs to the specified vertical."
                        }
                    ]
                },
                {
                    "name": "underExposedLikelihood",
                    "desc": "Under-exposed likelihood.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN",
                            "desc": "Unknown likelihood."
                        },
                        {
                            "name": "VERY_UNLIKELY",
                            "desc": "It is very unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "UNLIKELY",
                            "desc": "It is unlikely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "POSSIBLE",
                            "desc": "It is possible that the image belongs to the specified vertical."
                        },
                        {
                            "name": "LIKELY",
                            "desc": "It is likely that the image belongs to the specified vertical."
                        },
                        {
                            "name": "VERY_LIKELY",
                            "desc": "It is very likely that the image belongs to the specified vertical."
                        }
                    ]
                }
            ]
        },
        {
            "name": "AnnotateImageRequest",
            "desc": "Request for performing Google Cloud Vision API tasks over a user-provided\nimage, with user-requested features.",
            "type": "object",
            "fields": [
                {
                    "name": "image",
                    "desc": "The image to be processed.",
                    "type": "ref",
                    "refType": "Image"
                },
                {
                    "name": "features",
                    "desc": "Requested features.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "Feature"
                },
                {
                    "name": "imageContext",
                    "desc": "Additional context that may accompany the image.",
                    "type": "ref",
                    "refType": "ImageContext"
                }
            ]
        },
        {
            "name": "Status",
            "desc": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` which can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting purpose.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
            "type": "object",
            "fields": [
                {
                    "name": "details",
                    "desc": "A list of messages that carry the error details.  There will be a\ncommon set of message types for APIs to use.",
                    "collection": "array",
                    "collectionItem": {
                        "collection": "map",
                        "type": "any"
                    }
                },
                {
                    "name": "code",
                    "desc": "The status code, which should be an enum value of google.rpc.Code.",
                    "type": "int32"
                },
                {
                    "name": "message",
                    "desc": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
                    "type": "string"
                }
            ]
        },
        {
            "name": "ImageProperties",
            "desc": "Stores image properties, such as dominant colors.",
            "type": "object",
            "fields": [
                {
                    "name": "dominantColors",
                    "desc": "If present, dominant colors completed successfully.",
                    "type": "ref",
                    "refType": "DominantColorsAnnotation"
                }
            ]
        },
        {
            "name": "Property",
            "desc": "A `Property` consists of a user-supplied name/value pair.",
            "type": "object",
            "fields": [
                {
                    "name": "uint64Value",
                    "desc": "Value of numeric properties.",
                    "type": "uint64"
                },
                {
                    "name": "name",
                    "desc": "Name of the property.",
                    "type": "string"
                },
                {
                    "name": "value",
                    "desc": "Value of the property.",
                    "type": "string"
                }
            ]
        },
        {
            "name": "Landmark",
            "desc": "A face-specific landmark (for example, a face feature).\nLandmark positions may fall outside the bounds of the image\nif the face is near one or more edges of the image.\nTherefore it is NOT guaranteed that `0 \u003c= x \u003c width` or\n`0 \u003c= y \u003c height`.",
            "type": "object",
            "fields": [
                {
                    "name": "position",
                    "desc": "Face landmark position.",
                    "type": "ref",
                    "refType": "Position"
                },
                {
                    "name": "type",
                    "desc": "Face landmark type.",
                    "type": "string",
                    "enum": [
                        {
                            "name": "UNKNOWN_LANDMARK",
                            "desc": "Unknown face landmark detected. Should not be filled."
                        },
                        {
                            "name": "LEFT_EYE",
                            "desc": "Left eye."
                        },
                        {
                            "name": "RIGHT_EYE",
                            "desc": "Right eye."
                        },
                        {
                            "name": "LEFT_OF_LEFT_EYEBROW",
                            "desc": "Left of left eyebrow."
                        },
                        {
                            "name": "RIGHT_OF_LEFT_EYEBROW",
                            "desc": "Right of left eyebrow."
                        },
                        {
                            "name": "LEFT_OF_RIGHT_EYEBROW",
                            "desc": "Left of right eyebrow."
                        },
                        {
                            "name": "RIGHT_OF_RIGHT_EYEBROW",
                            "desc": "Right of right eyebrow."
                        },
                        {
                            "name": "MIDPOINT_BETWEEN_EYES",
                            "desc": "Midpoint between eyes."
                        },
                        {
                            "name": "NOSE_TIP",
                            "desc": "Nose tip."
                        },
                        {
                            "name": "UPPER_LIP",
                            "desc": "Upper lip."
                        },
                        {
                            "name": "LOWER_LIP",
                            "desc": "Lower lip."
                        },
                        {
                            "name": "MOUTH_LEFT",
                            "desc": "Mouth left."
                        },
                        {
                            "name": "MOUTH_RIGHT",
                            "desc": "Mouth right."
                        },
                        {
                            "name": "MOUTH_CENTER",
                            "desc": "Mouth center."
                        },
                        {
                            "name": "NOSE_BOTTOM_RIGHT",
                            "desc": "Nose, bottom right."
                        },
                        {
                            "name": "NOSE_BOTTOM_LEFT",
                            "desc": "Nose, bottom left."
                        },
                        {
                            "name": "NOSE_BOTTOM_CENTER",
                            "desc": "Nose, bottom center."
                        },
                        {
                            "name": "LEFT_EYE_TOP_BOUNDARY",
                            "desc": "Left eye, top boundary."
                        },
                        {
                            "name": "LEFT_EYE_RIGHT_CORNER",
                            "desc": "Left eye, right corner."
                        },
                        {
                            "name": "LEFT_EYE_BOTTOM_BOUNDARY",
                            "desc": "Left eye, bottom boundary."
                        },
                        {
                            "name": "LEFT_EYE_LEFT_CORNER",
                            "desc": "Left eye, left corner."
                        },
                        {
                            "name": "RIGHT_EYE_TOP_BOUNDARY",
                            "desc": "Right eye, top boundary."
                        },
                        {
                            "name": "RIGHT_EYE_RIGHT_CORNER",
                            "desc": "Right eye, right corner."
                        },
                        {
                            "name": "RIGHT_EYE_BOTTOM_BOUNDARY",
                            "desc": "Right eye, bottom boundary."
                        },
                        {
                            "name": "RIGHT_EYE_LEFT_CORNER",
                            "desc": "Right eye, left corner."
                        },
                        {
                            "name": "LEFT_EYEBROW_UPPER_MIDPOINT",
                            "desc": "Left eyebrow, upper midpoint."
                        },
                        {
                            "name": "RIGHT_EYEBROW_UPPER_MIDPOINT",
                            "desc": "Right eyebrow, upper midpoint."
                        },
                        {
                            "name": "LEFT_EAR_TRAGION",
                            "desc": "Left ear tragion."
                        },
                        {
                            "name": "RIGHT_EAR_TRAGION",
                            "desc": "Right ear tragion."
                        },
                        {
                            "name": "LEFT_EYE_PUPIL",
                            "desc": "Left eye pupil."
                        },
                        {
                            "name": "RIGHT_EYE_PUPIL",
                            "desc": "Right eye pupil."
                        },
                        {
                            "name": "FOREHEAD_GLABELLA",
                            "desc": "Forehead glabella."
                        },
                        {
                            "name": "CHIN_GNATHION",
                            "desc": "Chin gnathion."
                        },
                        {
                            "name": "CHIN_LEFT_GONION",
                            "desc": "Chin left gonion."
                        },
                        {
                            "name": "CHIN_RIGHT_GONION",
                            "desc": "Chin right gonion."
                        }
                    ]
                }
            ]
        },
        {
            "name": "DominantColorsAnnotation",
            "desc": "Set of dominant colors and their corresponding scores.",
            "type": "object",
            "fields": [
                {
                    "name": "colors",
                    "desc": "RGB color values with their score and pixel fraction.",
                    "collection": "array",
                    "type": "ref",
                    "refType": "ColorInfo"
                }
            ]
        },
        {
            "name": "Position",
            "desc": "A 3D position in the image, used primarily for Face detection landmarks.\nA valid Position must have both x and y coordinates.\nThe position coordinates are in the same scale as the original image.",
            "type": "object",
            "fields": [
                {
                    "name": "z",
                    "desc": "Z coordinate (or depth).",
                    "type": "float32"
                },
                {
                    "name": "y",
                    "desc": "Y coordinate.",
                    "type": "float32"
                },
                {
                    "name": "x",
                    "desc": "X coordinate.",
                    "type": "float32"
                }
            ]
        },
        {
            "name": "WebImage",
            "desc": "Metadata for online images.",
            "type": "object",
            "fields": [
                {
                    "name": "score",
                    "desc": "Overall relevancy score for the image.\nNot normalized and not comparable across different image queries.",
                    "type": "float32"
                },
                {
                    "name": "url",
                    "desc": "The result image URL.",
                    "type": "string"
                }
            ]
        }
    ],
    "resources": [
        {
            "name": "images",
            "methods": [
                {
                    "name": "annotate",
                    "desc": "Run image detection and annotation for a batch of images.",
                    "path": "v1/images:annotate",
                    "httpMethod": "POST",
                    "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                    ],
                    "request": "BatchAnnotateImagesRequest",
                    "response": "BatchAnnotateImagesResponse"
                }
            ]
        }
    ]
}